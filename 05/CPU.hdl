// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    /** 指令解碼:
    * 指令中有三個 d 位元，{A, D, M}，決定了哪個註冊接受 ALU 的輸出。**/
    DMux(in=true, sel=instruction[15], a=atype, b=ctype);
    Or(a=atype, b=instruction[5], out=ainstruct);
    And(a=ctype, b=instruction[4], out=cinstruct);

    /** A 註冊 **/
    Mux16(a=aluout, b=instruction, sel=atype, out=toareg);
    ARegister(in=toareg, load=ainstruct, out=aregout, out[0..14]=addressM);

    /** D 註冊和 ALU **/
    Mux16(a=aregout, b=inM, sel=instruction[12], out=inputsel);

    ALU(x=dregout, y=inputsel, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], 
    f=instruction[7], no=instruction[6], out=aluout, zr=zrout, ng=ngout, out=outM);
    And(a=ctype, b=instruction[3], out=writeM);

    DRegister(in=aluout, load=cinstruct, out=dregout);

    /** 程序計數器:
    * 我們需要在 PC=A 和 PC++ 之間進行選擇（默認情況下是 PC++）。 跳躍條件決定是否發生 PC=A。
    * 我們知道從 Hack 機器語言中有六種不同的條件，除了默認的 JMP 外，它們是 JGT、JEQ、JGE、JLT、JNE 和 JLE。
    * 然而，我們只需要 JGT 和 JLE 來應對所有情況。 我們通過 ALU 的 'zrout' 和 'ngout' 輸出來協助我們，它們確定輸出是否為零或負。
    * 指令的前三位確定跳躍條件，每個位元的功能在 "The Elements of Computing Systems" 的圖4.5中可見。**/
    Or(a=zrout, b=ngout, out=leqzero);     // ALU 告訴我們是否 out <= 0
    Not(in=leqzero, out=posout);           // 如果不是，out>0

    And(a=instruction[0], b=posout, out=jgt);    // 如果 out>0 跳躍
    And(a=instruction[1], b=zrout, out=jeq);    // 如果 out=0 跳躍
    And(a=instruction[2], b=ngout, out=jlt);    // 如果 out<0 跳躍
    Or(a=jeq, b=jlt, out=jle);           // 如果 out<=0 跳躍
    Or(a=jgt, b=jle, out=jmp);           // 涵蓋所有跳躍條件

    And(a=jmp, b=ctype, out=dojump);     // C 指令告訴我們跳躍
    Not(in=dojump, out=nojump);          // 或增加

    PC(in=aregout, load=dojump, inc=nojump, reset=reset, out[0..14]=pc);

}